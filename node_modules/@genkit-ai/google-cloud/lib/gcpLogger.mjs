import {
  __async,
  __spreadValues
} from "./chunk-DJRN6NKF.mjs";
import { LoggingWinston } from "@google-cloud/logging-winston";
let additionalStream;
class GcpLogger {
  constructor(options) {
    this.options = options || {};
  }
  getLogger(env) {
    return __async(this, null, function* () {
      const winston = yield import("winston");
      const format = this.shouldExport(env) ? { format: winston.format.json() } : {
        format: winston.format.printf((info) => {
          return `[${info.level}] ${info.message}`;
        })
      };
      let transports = [];
      transports.push(
        this.shouldExport(env) ? new LoggingWinston({
          projectId: this.options.projectId,
          labels: { module: "genkit" },
          prefix: "genkit",
          logName: "genkit_log"
        }) : new winston.transports.Console()
      );
      if (additionalStream) {
        transports.push(
          new winston.transports.Stream({ stream: additionalStream })
        );
      }
      return winston.createLogger(__spreadValues({
        transports
      }, format));
    });
  }
  shouldExport(env) {
    var _a;
    return ((_a = this.options.telemetryConfig) == null ? void 0 : _a.forceDevExport) || env !== "dev";
  }
}
function __addTransportStreamForTesting(stream) {
  additionalStream = stream;
}
export {
  GcpLogger,
  __addTransportStreamForTesting
};
//# sourceMappingURL=gcpLogger.mjs.map