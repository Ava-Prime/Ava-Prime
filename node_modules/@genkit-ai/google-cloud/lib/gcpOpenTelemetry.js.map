{"version":3,"sources":["../src/gcpOpenTelemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TelemetryConfig } from '@genkit-ai/core';\nimport { MetricExporter } from '@google-cloud/opentelemetry-cloud-monitoring-exporter';\nimport { TraceExporter } from '@google-cloud/opentelemetry-cloud-trace-exporter';\nimport { GcpDetectorSync } from '@google-cloud/opentelemetry-resource-util';\nimport { Span, SpanStatusCode, TraceFlags } from '@opentelemetry/api';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { ExportResult } from '@opentelemetry/core';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';\nimport { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  AggregationTemporality,\n  DefaultAggregation,\n  ExponentialHistogramAggregation,\n  InMemoryMetricExporter,\n  InstrumentType,\n  PeriodicExportingMetricReader,\n  PushMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport { NodeSDKConfiguration } from '@opentelemetry/sdk-node';\nimport {\n  AlwaysOnSampler,\n  BatchSpanProcessor,\n  InMemorySpanExporter,\n  ReadableSpan,\n  SpanExporter,\n} from '@opentelemetry/sdk-trace-base';\nimport { PluginOptions } from './index.js';\n\nlet metricExporter: PushMetricExporter;\nlet spanProcessor: BatchSpanProcessor;\nlet spanExporter: AdjustingTraceExporter;\n\n/**\n * Provides a {TelemetryConfig} for exporting OpenTelemetry data (Traces,\n * Metrics, and Logs) to the Google Cloud Operations Suite.\n */\nexport class GcpOpenTelemetry implements TelemetryConfig {\n  private readonly options: PluginOptions;\n  private readonly resource: Resource;\n\n  /**\n   * Log hook for writing trace and span metadata to log messages in the format\n   * required by GCP.\n   */\n  private gcpTraceLogHook = (span: Span, record: any) => {\n    const isSampled = !!(span.spanContext().traceFlags & TraceFlags.SAMPLED);\n    record['logging.googleapis.com/trace'] = `projects/${\n      this.options.projectId\n    }/traces/${span.spanContext().traceId}`;\n    record['logging.googleapis.com/spanId'] = span.spanContext().spanId;\n    record['logging.googleapis.com/trace_sampled'] = isSampled ? '1' : '0';\n  };\n\n  constructor(options?: PluginOptions) {\n    this.options = options || {};\n    this.resource = new Resource({ type: 'global' }).merge(\n      new GcpDetectorSync().detect()\n    );\n  }\n\n  getConfig(): Partial<NodeSDKConfiguration> {\n    spanProcessor = new BatchSpanProcessor(this.createSpanExporter());\n    return {\n      resource: this.resource,\n      spanProcessor: spanProcessor,\n      sampler: this.options?.telemetryConfig?.sampler || new AlwaysOnSampler(),\n      instrumentations: this.getInstrumentations(),\n      metricReader: this.createMetricReader(),\n    };\n  }\n\n  private createSpanExporter(): SpanExporter {\n    spanExporter = new AdjustingTraceExporter(\n      this.shouldExportTraces()\n        ? new TraceExporter()\n        : new InMemorySpanExporter()\n    );\n    return spanExporter;\n  }\n\n  /**\n   * Creates a {MetricReader} for pushing metrics out to GCP via OpenTelemetry.\n   */\n  private createMetricReader(): PeriodicExportingMetricReader {\n    metricExporter = this.buildMetricExporter();\n    return new PeriodicExportingMetricReader({\n      exportIntervalMillis:\n        this.options?.telemetryConfig?.metricExportIntervalMillis || 300_000,\n      exportTimeoutMillis:\n        this.options?.telemetryConfig?.metricExportTimeoutMillis || 300_000,\n      exporter: metricExporter,\n    });\n  }\n\n  /** Gets all open telemetry instrumentations as configured by the plugin. */\n  private getInstrumentations() {\n    if (this.options?.telemetryConfig?.autoInstrumentation) {\n      return getNodeAutoInstrumentations(\n        this.options?.telemetryConfig?.autoInstrumentationConfig || {}\n      ).concat(this.getDefaultLoggingInstrumentations());\n    }\n    return this.getDefaultLoggingInstrumentations();\n  }\n\n  private shouldExportTraces(): boolean {\n    return (\n      (this.options.telemetryConfig?.forceDevExport ||\n        process.env.GENKIT_ENV !== 'dev') &&\n      !this.options.telemetryConfig?.disableTraces\n    );\n  }\n\n  private shouldExportMetrics(): boolean {\n    return (\n      (this.options.telemetryConfig?.forceDevExport ||\n        process.env.GENKIT_ENV !== 'dev') &&\n      !this.options.telemetryConfig?.disableMetrics\n    );\n  }\n\n  /** Always configure the Pino and Winston instrumentations */\n  private getDefaultLoggingInstrumentations(): Instrumentation[] {\n    return [\n      new WinstonInstrumentation({ logHook: this.gcpTraceLogHook }),\n      new PinoInstrumentation({ logHook: this.gcpTraceLogHook }),\n    ];\n  }\n\n  private buildMetricExporter(): PushMetricExporter {\n    const exporter: PushMetricExporter = this.shouldExportMetrics()\n      ? new MetricExporter({ projectId: this.options.projectId })\n      : new InMemoryMetricExporter(AggregationTemporality.DELTA);\n    exporter.selectAggregation = (instrumentType: InstrumentType) => {\n      if (instrumentType === InstrumentType.HISTOGRAM) {\n        return new ExponentialHistogramAggregation();\n      }\n      return new DefaultAggregation();\n    };\n    exporter.selectAggregationTemporality = (\n      instrumentType: InstrumentType\n    ) => {\n      return AggregationTemporality.DELTA;\n    };\n    return exporter;\n  }\n}\n\n/**\n * Adjusts spans before exporting to GCP. In particular, redacts PII\n * (input prompts and outputs), and adds a workaround attribute to\n * error spans that marks them as error in GCP.\n */\nclass AdjustingTraceExporter implements SpanExporter {\n  constructor(private exporter: SpanExporter) {}\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.exporter?.export(this.adjust(spans), resultCallback);\n  }\n\n  shutdown(): Promise<void> {\n    return this.exporter?.shutdown();\n  }\n\n  getExporter(): SpanExporter {\n    return this.exporter;\n  }\n\n  forceFlush(): Promise<void> {\n    if (this.exporter?.forceFlush) {\n      return this.exporter.forceFlush();\n    }\n    return Promise.resolve();\n  }\n\n  private adjust(spans: ReadableSpan[]): ReadableSpan[] {\n    return spans.map((span) => {\n      span = this.redactPii(span);\n      span = this.markErrorSpanAsError(span);\n      span = this.normalizeLabels(span);\n      return span;\n    });\n  }\n\n  private redactPii(span: ReadableSpan): ReadableSpan {\n    const hasInput = 'genkit:input' in span.attributes;\n    const hasOutput = 'genkit:output' in span.attributes;\n\n    return !hasInput && !hasOutput\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            'genkit:input': '<redacted>',\n            'genkit:output': '<redacted>',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private markErrorSpanAsError(span: ReadableSpan): ReadableSpan {\n    return span.status.code !== SpanStatusCode.ERROR\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            '/http/status_code': '599',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private normalizeLabels(span: ReadableSpan): ReadableSpan {\n    const normalized = {} as Record<string, any>;\n    for (const [key, value] of Object.entries(span.attributes)) {\n      normalized[key.replace(/\\:/g, '/')] = value;\n    }\n    return {\n      ...span,\n      spanContext: span.spanContext,\n      attributes: normalized,\n    };\n  }\n}\n\nexport function __getMetricExporterForTesting(): InMemoryMetricExporter {\n  return metricExporter as InMemoryMetricExporter;\n}\n\nexport function __getSpanExporterForTesting(): InMemorySpanExporter {\n  return spanExporter.getExporter() as InMemorySpanExporter;\n}\n\nexport function __forceFlushSpansForTesting() {\n  spanProcessor.forceFlush();\n}\n"],"mappings":"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","names":[]}