import * as winston from 'winston';
import { TelemetryConfig as TelemetryConfig$1, Plugin, LoggerConfig } from '@genkit-ai/core';
import { Writable } from 'stream';
import { InstrumentationConfigMap } from '@opentelemetry/auto-instrumentations-node';
import { Instrumentation } from '@opentelemetry/instrumentation';
import { InMemorySpanExporter, Sampler } from '@opentelemetry/sdk-trace-base';
import { InMemoryMetricExporter } from '@opentelemetry/sdk-metrics';
import { NodeSDKConfiguration } from '@opentelemetry/sdk-node';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a {TelemetryConfig} for exporting OpenTelemetry data (Traces,
 * Metrics, and Logs) to the Google Cloud Operations Suite.
 */
declare class GcpOpenTelemetry implements TelemetryConfig$1 {
    private readonly options;
    private readonly resource;
    /**
     * Log hook for writing trace and span metadata to log messages in the format
     * required by GCP.
     */
    private gcpTraceLogHook;
    constructor(options?: PluginOptions);
    getConfig(): Partial<NodeSDKConfiguration>;
    private createSpanExporter;
    /**
     * Creates a {MetricReader} for pushing metrics out to GCP via OpenTelemetry.
     */
    private createMetricReader;
    /** Gets all open telemetry instrumentations as configured by the plugin. */
    private getInstrumentations;
    private shouldExportTraces;
    private shouldExportMetrics;
    /** Always configure the Pino and Winston instrumentations */
    private getDefaultLoggingInstrumentations;
    private buildMetricExporter;
}
declare function __getMetricExporterForTesting(): InMemoryMetricExporter;
declare function __getSpanExporterForTesting(): InMemorySpanExporter;
declare function __forceFlushSpansForTesting(): void;

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface PluginOptions {
    projectId?: string;
    telemetryConfig?: TelemetryConfig;
}
interface TelemetryConfig {
    sampler?: Sampler;
    autoInstrumentation?: boolean;
    autoInstrumentationConfig?: InstrumentationConfigMap;
    metricExportIntervalMillis?: number;
    metricExportTimeoutMillis?: number;
    instrumentations?: Instrumentation[];
    /** When true, metrics are not sent to GCP. */
    disableMetrics?: boolean;
    /** When true, traces are not sent to GCP. */
    disableTraces?: boolean;
    /** When true, telemetry data will be exported, even for local runs */
    forceDevExport?: boolean;
}
/**
 * Provides a plugin for using Genkit with GCP.
 */
declare const googleCloud: Plugin<[PluginOptions] | []>;

/**
 * Provides a {LoggerConfig} for exporting Genkit debug logs to GCP Cloud
 * logs.
 */
declare class GcpLogger implements LoggerConfig {
    private readonly options;
    constructor(options?: PluginOptions);
    getLogger(env: string): Promise<winston.Logger>;
    private shouldExport;
}
declare function __addTransportStreamForTesting(stream: Writable): void;

export { GcpLogger, GcpOpenTelemetry, type PluginOptions, type TelemetryConfig, __addTransportStreamForTesting, __forceFlushSpansForTesting, __getMetricExporterForTesting, __getSpanExporterForTesting, googleCloud as default, googleCloud };
