{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { genkitPlugin, Plugin } from '@genkit-ai/core';\nimport { InstrumentationConfigMap } from '@opentelemetry/auto-instrumentations-node';\nimport { Instrumentation } from '@opentelemetry/instrumentation';\nimport { Sampler } from '@opentelemetry/sdk-trace-base';\nimport { GoogleAuth } from 'google-auth-library';\nimport { GcpLogger } from './gcpLogger.js';\nimport { GcpOpenTelemetry } from './gcpOpenTelemetry.js';\n\nexport interface PluginOptions {\n  projectId?: string;\n  telemetryConfig?: TelemetryConfig;\n}\n\nexport interface TelemetryConfig {\n  sampler?: Sampler;\n  autoInstrumentation?: boolean;\n  autoInstrumentationConfig?: InstrumentationConfigMap;\n  metricExportIntervalMillis?: number;\n  metricExportTimeoutMillis?: number;\n  instrumentations?: Instrumentation[];\n\n  /** When true, metrics are not sent to GCP. */\n  disableMetrics?: boolean;\n\n  /** When true, traces are not sent to GCP. */\n  disableTraces?: boolean;\n\n  /** When true, telemetry data will be exported, even for local runs */\n  forceDevExport?: boolean;\n}\n\n/**\n * Provides a plugin for using Genkit with GCP.\n */\nexport const googleCloud: Plugin<[PluginOptions] | []> = genkitPlugin(\n  'googleCloud',\n  async (options?: PluginOptions) => {\n    const authClient = new GoogleAuth();\n    const projectId = options?.projectId || (await authClient.getProjectId());\n    const optionsWithProjectId = {\n      ...options,\n      projectId,\n    };\n\n    return {\n      telemetry: {\n        instrumentation: {\n          id: 'googleCloud',\n          value: new GcpOpenTelemetry(optionsWithProjectId),\n        },\n        logger: {\n          id: 'googleCloud',\n          value: new GcpLogger(optionsWithProjectId),\n        },\n      },\n    };\n  }\n);\n\nexport default googleCloud;\nexport * from './gcpLogger.js';\nexport * from './gcpOpenTelemetry.js';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAqC;AAIrC,iCAA2B;AAC3B,uBAA0B;AAC1B,8BAAiC;AAsDjC,wBAAc,2BA5Ed;AA6EA,wBAAc,kCA7Ed;AAkDO,MAAM,kBAA4C;AAAA,EACvD;AAAA,EACA,CAAO,YAA4B;AACjC,UAAM,aAAa,IAAI,sCAAW;AAClC,UAAM,aAAY,mCAAS,eAAc,MAAM,WAAW,aAAa;AACvE,UAAM,uBAAuB,iCACxB,UADwB;AAAA,MAE3B;AAAA,IACF;AAEA,WAAO;AAAA,MACL,WAAW;AAAA,QACT,iBAAiB;AAAA,UACf,IAAI;AAAA,UACJ,OAAO,IAAI,yCAAiB,oBAAoB;AAAA,QAClD;AAAA,QACA,QAAQ;AAAA,UACN,IAAI;AAAA,UACJ,OAAO,IAAI,2BAAU,oBAAoB;AAAA,QAC3C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,cAAQ;","names":[]}